from http.server import BaseHTTPRequestHandler, HTTPServer


# This is bringing in tools from Python's http.server module that help us create a simple web server and handle web requests.

host = "localhost"
port = 8000

# This sets the server to run on localhost (which means it will only be accessible from the same computer) and use port 8000.


def block_request(self):
    self.send_response(403)
    self.send_header("Content-Type", "text/html")
    self.end_headers()
    self.wfile.write(b"Blocked due to suspicious activity.")
    print("Blocking request")

def handle_request(self):
    self.send_response(200)
    self.send_header("Content-Type", "application/json")
    self.end_headers()
    self.wfile.write(b'{"message": "Request handled successfully."}')

# These are two functions:
	# 'block_request(self)': if a request is suspicious, this function sends back a "403 Forbidden" response and a message saying the request was blocked.
	# 'handle_request(self)': if the request is okay, this function sends back a “200 OK” response with a message saying the request was handled successfully

class ServerHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.is_suspicious_request():
            block_request(self)
        else:
            handle_request(self)

    def do_POST(self):
        if self.is_suspicious_request():
            block_request(self)
        else:
            handle_request(self)

    def is_suspicious_request(self):
        content_length = int(self.headers.get('Content-Length', 0))
        if content_length > 0:
            post_data = self.rfile.read(content_length).decode('utf-8')
            suspicious_patterns = ["class.module.classLoader.resources.context.parent.pipeline.first.pattern"]
            for pattern in suspicious_patterns:
                if pattern in post_data:
                    return True
        return False

# Creates a class called ServerHandler that will handle incoming web requests.
	# 'do_GET(self)': handles GET requests (like when you type a URL in your browser). It checks if the request is suspicious and either blocks it or handles it.
	# 'do_POST(self)': handles POST requests (like when you submit a form on a website). It does the same check as 'do_GET'.
	# 'is_suspicious_request(self)': checks if the request contains anything suspicious by looking for certain patterns in the data.

if __name__ == "__main__":
    server = HTTPServer((host, port), ServerHandler)
    print("[+] Firewall Server")
    print("[+] HTTP Web Server running on: %s:%s" % (host, port))

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass

    server.server_close()
    print("[+] Server terminated. Exiting...")

# This part of the script sets up and starts the server:
# It creates a server with the specified host and port, using ServerHandler to handle requests.
# Prints messages to let you know the server is starting.
# server.serve_forever(): Keeps the server running until you manually stop it.
# If you stop it (e.g., by pressing Ctrl+C), it will close the server and print a message saying the server is terminated.
